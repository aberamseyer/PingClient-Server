diff --git a/PingClient.java b/PingClient.java
index 8a746a7..9bf0e47 100644
--- a/PingClient.java
+++ b/PingClient.java
@@ -65,6 +65,7 @@ class PingClient {
 			}
 		} catch (Exception e) {
 			System.err.println("Exception while pinging server");
+			System.exit(1);
 		}
 		
 		printResults();
@@ -142,12 +143,12 @@ class PingClient {
 			max = (max > delays[i]) ? max : delays[i];
 			sum += delays[i];
 		} 
-		avg = (double)sum / (10-dropped);
+		avg = (double) sum / (10-dropped);
 
-		DecimalFormat formatPercent = new DecimalFormat("##%");
-		DecimalFormat formatDecimal = new DecimalFormat("###.#");
+		DecimalFormat percent = new DecimalFormat("##%");
+		DecimalFormat decimal = new DecimalFormat("###.#");
 		System.out.println("---- PING STATISTICS ----");
-		System.out.println("10 packets transmitted, " + (10-dropped) + " received, " + formatPercent.format(dropped/10.0) + " packet loss");
-		System.out.println("round-trip (ms) min/avg/max = " + min + "/" + formatDecimal.format(avg) + "/" + max); 
+		System.out.println("10 packets transmitted, " + (10-dropped) + " received, " + percent.format(dropped/10.0) + " packet loss");
+		System.out.println("round-trip (ms) min/avg/max = " + min + "/" + decimal.format(avg) + "/" + max); 
 	}	
 }
diff --git a/PingServer.java b/PingServer.java
index 8e4ef52..64b581e 100644
--- a/PingServer.java
+++ b/PingServer.java
@@ -3,20 +3,27 @@ import java.io.*;
 import java.net.*;
 import java.lang.NumberFormatException;
 
+/**
+ * creates a simple ping server that echos back whatever is sent to it
+ */
 class PingServer {
 	private static final double LOSS_RATE = 0.25;
 	private static final int AVERAGE_DELAY = 150;
-	public static void main(String args[]) throws Exception {
+	private static Random gen;
+	private static String clientMessage = "";
+	private static String action = "";
+	private static int delay = -1;
+	private static String protocol;
+	private static int port = 0;
+	private static long seed = -1;
+		
+	public static void main(String args[]) {
 		// check for correct number of arguments
 		if (args.length < 2 || args.length > 3) {
 			System.out.println("Usage: java PingServer port protocol [seed]\n\tprotocol - {TCP, UDP}");
 			System.exit(1);
 		}
 
-		String protocol = args[1];
-		int port = 0;
-		long seed = -1;
-
 		// check arguments for errors
 		try {
 			port = Integer.parseInt(args[0]);	
@@ -28,6 +35,9 @@ class PingServer {
 			System.err.println("ERR - arg 1");
 			System.exit(1);
 		}
+
+		protocol = args[1];
+	
 		if (!protocol.equals("TCP") && !protocol.equals("UDP")) {
 			System.err.println("ERR - arg 2");	
 			System.exit(1);
@@ -40,62 +50,77 @@ class PingServer {
 				System.exit(1);
 			}
 		}
-
-		Random gen = (seed == -1) ? new Random(System.currentTimeMillis()) : new Random(seed);
-		String clientMessage = "";
-		String action = "";
-		int delay = -1;
+		// create random gen with seed or nothing if not given
+		gen  = (seed == -1) ? new Random(System.currentTimeMillis()) : new Random(seed);
 		
-		// TCP Connection
-		if (protocol.equals("TCP")) {
-			ServerSocket welcomeSocket = new ServerSocket(port);
-			System.out.println("Listening for connections...");
-			while(true) {
-				delay = (int) (gen.nextDouble() * 2 * AVERAGE_DELAY);
-				Socket connectionSocket = welcomeSocket.accept();
-				BufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));
-				DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());
-				clientMessage = inFromClient.readLine();
-				
-				Thread.sleep(delay); // simulate delay
-				
-				outToClient.writeBytes(clientMessage);
-				String address = connectionSocket.getRemoteSocketAddress().toString().substring(1);
-				System.out.println(address + "> " + clientMessage + "  ACTION: " + action + " " + delay + " ms");	
-				connectionSocket.close();	
-			}	
+		try { 
+			if (protocol.equals("TCP")) {
+				serveTCP();
+			}
+			else {
+				serveUDP();
+			} 
+		} catch (Exception e) {
+			System.err.println("Exception while pinging server");
+			System.exit(1);
 		}
+	}
 
-		// UDP Connectioon
-		else {
-			DatagramSocket serverSocket = new DatagramSocket(port);
-			byte[] receiveData = new byte[1024];
-			byte[] sendData = new byte[1024];
-
-			System.out.println("Listening for connections...");
-			while(true) {
-				DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
-				serverSocket.receive(receivePacket);
-				clientMessage = new String(receivePacket.getData());
-				String address = receivePacket.getSocketAddress().toString().substring(1);
-				// Determine whether to send a reply or not
-				if (gen.nextDouble() < LOSS_RATE) {
-					action = "not sent";
-					System.out.println(address + "> " + clientMessage + "  ACTION: " + action); 
-				}
-				else {
-					action = "delayed";
-					delay = (int) (gen.nextDouble() * 2 * AVERAGE_DELAY);
-					InetAddress IPAddress = receivePacket.getAddress();
-					int returnPort = receivePacket.getPort();
-					sendData = clientMessage.getBytes();
-					DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, returnPort);
-					Thread.sleep(delay);
-					serverSocket.send(sendPacket); 
-					System.out.println(address + "> " + clientMessage + "  ACTION: " + action + " " + delay + " ms");
-				} 
+	/**
+ 	* creates the TCP server
+ 	*/
+	static void serveTCP() throws Exception {
+		ServerSocket welcomeSocket = new ServerSocket(port);
+		System.out.println("Listening for connections...");
+		while(true) {
+			delay = (int) (gen.nextDouble() * 2 * AVERAGE_DELAY);
+			Socket connectionSocket = welcomeSocket.accept();
+			BufferedReader inFromClient = new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));
+			DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());
+			clientMessage = inFromClient.readLine();
+			
+			Thread.sleep(delay); // simulate delay
 			
-					
+			outToClient.writeBytes(clientMessage); // echo back same message that was received
+			String address = connectionSocket.getRemoteSocketAddress().toString().substring(1);
+			System.out.println(address + "> " + clientMessage + "  ACTION: " + action + " " + delay + " ms");	
+			connectionSocket.close();	
+		}	
+	}
+
+	/**
+ 	* creates the UDP server
+ 	*/
+	static void serveUDP() throws Exception {
+		DatagramSocket serverSocket = new DatagramSocket(port);
+	
+		// create byte arrays to set and receive data
+		byte[] receiveData = new byte[1024];
+		byte[] sendData = new byte[1024];
+
+		System.out.println("Listening for connections...");
+		while(true) {
+			DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
+			serverSocket.receive(receivePacket);
+			clientMessage = new String(receivePacket.getData());
+			String address = receivePacket.getSocketAddress().toString().substring(1);
+			// Determine whether to send a reply or not
+			if (gen.nextDouble() < LOSS_RATE) {
+				action = "not sent";
+				System.out.println(address + "> " + clientMessage + "  ACTION: " + action); 
+			}
+			else {
+				action = "delayed";
+				delay = (int) (gen.nextDouble() * 2 * AVERAGE_DELAY); // calculate delay
+				InetAddress IPAddress = receivePacket.getAddress();
+				int returnPort = receivePacket.getPort();
+				sendData = clientMessage.getBytes();
+				DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, returnPort);
+
+				Thread.sleep(delay); // simulate delay 
+
+				serverSocket.send(sendPacket); 
+				System.out.println(address + "> " + clientMessage + "  ACTION: " + action + " " + delay + " ms");
 			} 
 		} 
 	}
